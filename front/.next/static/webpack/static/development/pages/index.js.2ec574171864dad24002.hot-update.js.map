{"version":3,"file":"static/webpack/static/development/pages/index.js.2ec574171864dad24002.hot-update.js","sources":["webpack:///./pages/index.js","webpack:///./reducers/user.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostForm from '../components/PostForm';\nimport MainPost from '../components/MainPost';\nimport { loginAction } from \"../reducers/user\";\n\n\n// 타임라인 역할\nconst Home = () => {\n\n    const dispatch = useDispatch();\n    const { isLoggedIn, me } = useSelector(state => state.user);\n    const { mainPosts } = useSelector(state => state.post);\n\n    useEffect( () => {\n\n    }, []);\n\n    return (\n        <>\n            { isLoggedIn ? <div>{me.nickname}님 반갑습니다.</div> : <div>로그아웃  상태</div>}\n            <div style={{ padding: 10 }}>Hello, FRIEND!</div>\n            {isLoggedIn &&\n                <PostForm/>\n            }\n            {mainPosts.map( (post) => {\n                return (\n                    <MainPost key={post} post={post} />\n                );\n            })}\n        </>\n    );\n};\n\nexport default Home;\n","// Store\nconst testUser = {\n    nickname: 'seoyoung',\n    Post: [],\n    Following: [],\n    Follower: [],\n    isLoggedIn: true,\n};\n\nexport const initialState = {\n    isLoggedIn : false, // 로그인 여부\n    isLoggingOut: false, // 로그아웃 시도 중\n    isLoggingIn: false, // 로그인 시도 중\n    logInErrorReason: '', // 로그인 에러 사유\n    signedUp: false, // 회원가입 성공\n    isSigningUp: false, // 회원가입 시도 중\n    signUpErrorReason: '', // 회원가입 실패 사유\n    me: null, // 내 정보\n    followingList: [], // 팔로잉 리스트\n    followerList: [], // 팔로워 리스트\n    userInfo: null, // 남의 정보\n};\n\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; // Action 이름\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\n\n// 로그아웃\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\n\n// 회원가입\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\n\n// 사용자 정보 불러오기\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\n\n// 팔로우\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\n\n// 언팔로우\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\n\n// 팔로우, 팔로잉 목록 불러오기\nexport const LOAD_LIST_REQUEST = 'LOAD_LIST_REQUEST';\nexport const LOAD_LIST_SUCCESS = 'LOAD_LIST_SUCCESS';\nexport const LOAD_LIST_FAILURE = 'LOAD_LIST_FAILURE';\n\n// 내 팔로워 삭제\nexport const DELETE_FOLLOWER_REQUEST = 'DELETE_FOLLOWER_REQUEST';\nexport const DELETE_FOLLOWER_SUCCESS = 'DELETE_FOLLOWER_SUCCESS';\nexport const DELETE_FOLLOWER_FAILURE = 'DELETE_FOLLOWER_FAILURE';\n\n/*\nexport const signUpAction = (data) => {\n    return {\n        type: SIGN_UP,\n        data\n    };\n};\n*/\n\n// 바로 리턴하는 함수의 경우 이런식으로 사용 가능.\n/*export const SignUp = data => ({\n   type: SIGN_UP_REQUEST,\n   data,\n});*/\n\n\nconst reducers = (state = initialState, action) => {\n    switch (action.type) {\n        case LOG_IN_REQUEST : {\n            return {\n                ...state,\n                isLoggingIn: true,\n                isLoggedIn: true,\n                me: null,\n                logInErrorReason: '',\n            };\n        }\n        case LOG_IN_SUCCESS : {\n            return {\n                ...state,\n                me: testUser,\n                isLoggingIn: false,\n                isLoggedIn: true,\n            }\n        }\n        case LOG_IN_FAILURE : {\n            return {\n                ...state,\n                isLoggingIn: false,\n                isLoggedIn: false,\n                logInErrorReason: action.error,\n            }\n        }\n        case LOG_OUT_REQUEST : {\n            return {\n                ...state,\n                isLoggedIn: false,\n                user: null,\n            };\n        }\n        case SIGN_UP_REQUEST : {\n            return {\n                ...state,\n                signUpData: action.data,\n            };\n        }\n        default : {\n            return {\n              ...state,\n            };\n        }\n    }\n};\n\nexport default reducers;\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAHA;AAGA;AAAA;AAHA;AAAA;AACA;AADA;AAIA;AAAA;AAJA;AACA;AAKA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAZA;AAcA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AASA;AACA;AAAA;;;;;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AA3CA;AA6CA;AACA;AACA;;;;A","sourceRoot":""}