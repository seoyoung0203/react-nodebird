{"ast":null,"code":"import { all, call, put, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from \"../reducers/user\";\n\nfunction loginAPI() {\n  axios.get('/login');\n}\n\nfunction* login() {\n  try {\n    //yield call(loginAPI);\n    delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}","map":{"version":3,"sources":["/Users/jeongseoyeong/Desktop/react-nodebird/front/sagas/user.js"],"names":["all","call","put","takeLatest","fork","delay","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","loginAPI","get","login","type","e","console","error","watchLogin","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,IAArC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA6D,kBAA7D;;AAEA,SAASC,QAAT,GAAoB;AAChBJ,EAAAA,KAAK,CAACK,GAAN,CAAU,QAAV;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA;AACAP,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAMH,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMO,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMZ,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUS,UAAV,GAAuB;AACnB,QAAMd,UAAU,CAACM,cAAD,EAAiBG,KAAjB,CAAhB;AACH;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNI,IAAI,CAACa,UAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { all, call, put, takeLatest, fork, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST} from \"../reducers/user\";\n\nfunction loginAPI() {\n    axios.get('/login');\n}\n\nfunction* login() {\n    try {\n        //yield call(loginAPI);\n        delay(2000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n        });\n    } catch(e) {\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogin() {\n    yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}