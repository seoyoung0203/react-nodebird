{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(post),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n\nfunction postAPI() {}\n\nfunction post() {\n  return _regeneratorRuntime.wrap(function post$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(postAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchPost() {\n  return _regeneratorRuntime.wrap(function watchPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/jeongseoyeong/Desktop/react-nodebird/front/sagas/post.js"],"names":["post","watchPost","postSaga","all","call","fork","takeLatest","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","postAPI","put","type"],"mappings":";;oDAOUA,I;qDAaAC,S;qDAIeC,Q;;AAxBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,gBAA7C,QAAqE,kBAArE;;AAEA,SAASC,OAAT,GAAmB,CAElB;;AAED,SAAUV,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMI,IAAI,CAACM,OAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMG,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUR,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,EAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, takeLatest } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from '../reducers/post';\n\nfunction postAPI() {\n\n}\n\nfunction* post() {\n    try {\n        yield call(postAPI);\n        yield put({\n            type: ADD_POST_SUCCESS\n        })\n    } catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE\n        })\n    }\n}\n\nfunction* watchPost() {\n\n}\n\nexport default function* postSaga() {\n    yield all([]);\n}"]},"metadata":{},"sourceType":"module"}