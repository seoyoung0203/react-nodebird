{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(post),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(comment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, takeLatest, put } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS } from '../reducers/post';\n\nfunction postAPI() {}\n\nfunction post() {\n  return _regeneratorRuntime.wrap(function post$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(postAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction comment() {\n  return _regeneratorRuntime.wrap(function comment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put({\n            type: ADD_COMMENT_SUCCESS\n          });\n\n        case 3:\n          _context2.next = 9;\n          break;\n\n        case 5:\n          _context2.prev = 5;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 9;\n          return put({\n            type: ADD_COMMENT_FAILURE\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 5]]);\n}\n\nfunction watchPost() {\n  return _regeneratorRuntime.wrap(function watchPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, post);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchComment() {\n  return _regeneratorRuntime.wrap(function watchComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, comment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/jeongseoyeong/Desktop/react-nodebird/front/sagas/post.js"],"names":["post","comment","watchPost","watchComment","postSaga","all","call","fork","takeLatest","put","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","postAPI","type"],"mappings":";;oDAaUA,I;qDAaAC,O;qDAYAC,S;qDAIAC,Y;qDAIeC,Q;;AA9CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,UAA1B,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAKyBC,mBALzB,QAMO,kBANP;;AAQA,SAASC,OAAT,GAAmB,CAElB;;AAED,SAAUhB,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMM,IAAI,CAACU,OAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEN;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMF,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUX,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMQ,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEF;AADA,WAAD,CAAT;;AAFR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMN,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUZ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACE,gBAAD,EAAmBV,IAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACK,mBAAD,EAAsBZ,OAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACL,SAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, takeLatest, put } from 'redux-saga/effects';\nimport {\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS\n} from '../reducers/post';\n\nfunction postAPI() {\n\n}\n\nfunction* post() {\n    try {\n        yield call(postAPI);\n        yield put({\n            type: ADD_POST_SUCCESS\n        });\n    } catch (e) {\n        yield put({\n            type: ADD_POST_FAILURE\n        });\n    }\n}\n\nfunction* comment() {\n    try{\n        yield put({\n            type: ADD_COMMENT_SUCCESS\n        });\n    } catch (e) {\n        yield put({\n            type: ADD_COMMENT_FAILURE\n        });\n    }\n}\n\nfunction* watchPost() {\n    yield takeLatest(ADD_POST_REQUEST, post);\n}\n\nfunction* watchComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, comment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchPost),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}