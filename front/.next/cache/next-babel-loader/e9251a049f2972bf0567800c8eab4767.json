{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: []\n};\nconst ADD_POST = 'ADD_POST';\nconst ADD_TEST = 'ADD_TEST';\nconst addPostAction = {\n  type: ADD_POST\n};\nconst addTestAction = {\n  type: ADD_TEST,\n  data: {\n    content: 'Hello, This is main post!',\n    UserId: 1,\n    User: {\n      nickname: 'seoyoung'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_TEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/jeongseoyeong/Desktop/react-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","ADD_POST","ADD_TEST","addPostAction","type","addTestAction","data","content","UserId","User","nickname","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE;AADa,CAArB;AAIP,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAEH;AADY,CAAtB;AAIA,MAAMI,aAAa,GAAG;AAClBD,EAAAA,IAAI,EAAEF,QADY;AAElBI,EAAAA,IAAI,EAAG;AACHC,IAAAA,OAAO,EAAE,2BADN;AAEHC,IAAAA,MAAM,EAAE,CAFL;AAGHC,IAAAA,IAAI,EAAG;AACHC,MAAAA,QAAQ,EAAE;AADP;AAHJ;AAFW,CAAtB;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACT,IAAf;AACI,SAAKH,QAAL;AAAe;AACX,iCACOW,KADP;AAGH;;AACD,SAAKV,QAAL;AAAe;AACX,iCACOU,KADP;AAEIZ,UAAAA,SAAS,EAAE,CAACa,MAAM,CAACP,IAAR,EAAc,GAAGM,KAAK,CAACZ,SAAvB;AAFf;AAIH;;AACD;AAAU;AACN,iCACOY,KADP;AAGH;AAhBL;AAkBH,CAnBD;;AAsBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    mainPosts: [],\n};\n\nconst ADD_POST = 'ADD_POST';\nconst ADD_TEST = 'ADD_TEST';\n\nconst addPostAction = {\n    type: ADD_POST,\n};\n\nconst addTestAction = {\n    type: ADD_TEST,\n    data : {\n        content: 'Hello, This is main post!',\n        UserId: 1,\n        User : {\n            nickname: 'seoyoung',\n        },\n    },\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST: {\n            return {\n                ...state,\n            };\n        }\n        case ADD_TEST: {\n            return {\n                ...state,\n                mainPosts: [action.data, ...state.mainPosts],\n            };\n        }\n        default : {\n            return {\n                ...state,\n            };\n        }\n    }\n};\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}